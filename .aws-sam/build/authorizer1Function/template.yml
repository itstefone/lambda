# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  User Forecast

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
  - AWS::Serverless-2016-10-31

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  MyHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Auth:
        DefaultAuthorizer: JWTTokenExample
        Authorizers:
          JWTTokenExample:
            JwtConfiguration:
              issuer: XXX
              audience: XXX
            IdentitySource: "$request.header.Authorization"

  getByCityForecastFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-forecast.handler
      Runtime: nodejs14.x
      MemorySize: 128
      Timeout: 800
      Description: Weather forecast information about city
      Events:
        Api:
          Type: Api
          Properties:
            Path: /city/{city}
            Method: GET

  getFileFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-file.handler
      Runtime: nodejs14.x
      MemorySize: 128
      Timeout: 500
      Description: Download by END POINT
      Events:
        Api:
          Type: Api
          Properties:
            Path: /files
            Method: GET

  fileUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/file-upload.handler
      Runtime: nodejs14.x
      MemorySize: 128
      Timeout: 500
      Description: Upload file
      Events:
        Api:
          Type: Api
          Properties:
            Path: /upload-file
            Method: POST

  uploadFileFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/upload-file.handler
      Runtime: nodejs14.x
      MemorySize: 128
      Timeout: 500
      Description: Upload file to bucket
      Events:
        Api:
          Type: Api
          Properties:
            Path: /upload
            Method: POST

  newFileDeleteFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/new-file-delete.handler
      Runtime: nodejs14.x
      MemorySize: 128
      Timeout: 500
      Description: Upload file to bucket
      Events:
        Api:
          Type: Api
          Properties:
            Path: /file-delete/{filename}
            Method: DELETE

  authorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/authorizer.handler
      Runtime: nodejs14.x
      MemorySize: 128
      Timeout: 500
      Description: Endpoint authorization

  authorizer1Function:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/authorizer1.handler
      Runtime: nodejs14.x
      MemorySize: 128
      Timeout: 500
      Description: Endpoint authorization

Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"
